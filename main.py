import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiosqlite
import os

from datetime import datetime  # ‚¨ÖÔ∏è –î–æ–±–∞–≤–∏–ª–∏

TOKEN = '7622268916:AAFOuwW5P8KZyuec175tvnFPjAtiLX-KYGk'
ADMIN_ID = 7029714670  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# –®–∞–≥–∏ –æ–ø—Ä–æ—Å–∞
class RegForm(StatesGroup):
    par_name = State()
    ch_name = State()
    ch_age = State()
    ch_class = State()
    ch_smena = State()
    ch_eng = State()
    par_numb = State()
    fel_numb = State()


# –°–æ–∑–¥–∞–µ–º –ë–î, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
async def init_db():
    if not os.path.exists("main.db"):
        async with aiosqlite.connect("main.db") as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS test2 (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    par_name TEXT,
                    ch_name TEXT,
                    ch_age TEXT,
                    ch_class TEXT,
                    ch_smena TEXT,
                    ch_eng TEXT,
                    par_numb TEXT,
                    fel_numb TEXT,
                    id_tg INTEGER,
                    reg_date TEXT
                )
            ''')
            await db.commit()


# –ö–æ–º–∞–Ω–¥–∞ /start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@dp.message(F.text == "/start")
async def start_registration(message: Message, state: FSMContext):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegForm.par_name)

@dp.message(RegForm.par_name)
async def step_par_name(message: Message, state: FSMContext):
    if not message.text or len(message.text) < 3:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return
    await state.update_data(par_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±—ë–Ω–∫–∞")
    await state.set_state(RegForm.ch_name)

@dp.message(RegForm.ch_name)
async def step_ch_name(message: Message, state: FSMContext):
    if not message.text or len(message.text) < 3:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return
    await state.update_data(ch_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
    await state.set_state(RegForm.ch_age)

@dp.message(RegForm.ch_age)
async def step_ch_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(ch_age=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—Ç—Å—è —Ä–µ–±—ë–Ω–æ–∫")
    await state.set_state(RegForm.ch_class)

@dp.message(RegForm.ch_class)
async def step_ch_class(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(ch_class=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫—É—é —Å–º–µ–Ω—É —É—á–∏—Ç—Å—è —Ä–µ–±—ë–Ω–æ–∫?")
    await state.set_state(RegForm.ch_smena)

@dp.message(RegForm.ch_smena)
async def step_ch_smena(message: Message, state: FSMContext):
    await state.update_data(ch_smena=message.text)
    await message.answer("–ö–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º —É —Ä–µ–±–µ–Ω–∫–∞? –ö–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏? –ó–∞–Ω–∏–º–∞–ª—Å—è –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ?")
    await state.set_state(RegForm.ch_eng)

@dp.message(RegForm.ch_eng)
async def step_ch_eng(message: Message, state: FSMContext):
    await state.update_data(ch_eng=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
    await state.set_state(RegForm.par_numb)

@dp.message(RegForm.par_numb)
async def step_par_numb(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(par_numb=message.text)

    # –ö–Ω–æ–ø–∫–∏-—Ñ–∏–ª–∏–∞–ª—ã
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–ª –ê–≤—Ä–æ—Ä—ã 17/2", callback_data="fil_avrory")],
        [InlineKeyboardButton(text="–£–ª –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∞—è,78", callback_data="fil_revol")],
        [InlineKeyboardButton(text="–£–ª –ë–∞–ª–∞–Ω–¥–∏–Ω–∞ 2–∞", callback_data="fil_baland")],
        [InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞", callback_data="fil_online")],
    ])
    await message.answer("–í –∫–∞–∫–æ–º —Ñ–∏–ª–∏–∞–ª–µ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?", reply_markup=kb)
    await state.set_state(RegForm.fel_numb)

@dp.callback_query(F.data.startswith("fil_"))
async def handle_filial(callback: types.CallbackQuery, state: FSMContext):
    filial_map = {
        "fil_avrory": "–£–ª –ê–≤—Ä–æ—Ä—ã 17/2",
        "fil_revol": "–£–ª –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∞—è,78",
        "fil_baland": "–£–ª –ë–∞–ª–∞–Ω–¥–∏–Ω–∞ 2–∞",
        "fil_online": "–û–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞"
    }

    choice = filial_map.get(callback.data)
    if not choice:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞.", show_alert=True)
        return

    await state.update_data(fel_numb=choice)
    data = await state.get_data()

    reg_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # ‚¨ÖÔ∏è –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with aiosqlite.connect("main.db") as db:
        await db.execute('''
            INSERT INTO test2 
            (par_name, ch_name, ch_age, ch_class, ch_smena, ch_eng, par_numb, fel_numb, id_tg, reg_date)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            data['par_name'], data['ch_name'], data['ch_age'],
            data['ch_class'], data['ch_smena'], data['ch_eng'],
            data['par_numb'], data['fel_numb'], callback.from_user.id,
            reg_date  # ‚¨ÖÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        ))
        await db.commit()

    await callback.message.edit_reply_markup()
    await callback.message.answer(f"{choice}")

    text = (
        f"üì• –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
        f"–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: {data['par_name']}\n"
        f"–ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {data['ch_name']}, {data['ch_age']} –ª–µ—Ç, {data['ch_class']} –∫–ª–∞—Å—Å\n"
        f"–°–º–µ–Ω–∞ —Ä–µ–±–µ–Ω–∫–∞: {data['ch_smena']}\n"
        f"–ó–Ω–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {data['ch_eng']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {data['par_numb']}\n"
        f"–§–∏–ª–∏–∞–ª: {data['fel_numb']}\n"
        f"Telegram ID: {callback.from_user.id}"
    )
    await bot.send_message(ADMIN_ID, text)

    await callback.message.answer("‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    await state.clear()

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
